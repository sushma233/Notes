1. JDK : Java 18 [Not JRE, we will require JDK] 
2. Windows OS? 

https://www.oracle.com/java/technologies/javase/jdk18-archive-downloads.html

3. NodeJS : https://nodejs.org/en [v20.x]
NPM : Node Package Manager

https://www.npmjs.com/

RedHat : RPM
Ubuntu : apt or apt-get
NodeJS : npm 

4. MySQL Community Server : [v8.0.36] - Mysql installer MSI

Dual License Policy : 

a. Community Version == Community Edition [Free and open source]
b. Enterprise version == Paid version

https://dev.mysql.com/downloads/mysql/ - Windows (x86, 32-bit), MSI Installer [285 MB - download]

5. MySQL --> Indexes in MYSQL? 

Databases ==> Data Stores

- SQL DB
- NoSQL DB
- In-memory cache implementation
- In-memory storages

Traditional env : HDD/SDD
new age of computation : SSD/HDD --> Memory 

Memory vs HDD Mem : is about 8-9X faster

Faster : RW operations

AWS : Redis 

In-memory storages :: Ephemeral Storages

Data state | Data storage :

- Persistent storage : Even when the machine [storage device/server/database server/etc] is switched OFF : data remains
- Non-persistent stotage : Even when the machine [storage device/server/database server/etc] is switched OFF : data goes away : Ephemeral

Data state is NON-Persistent ?

Enterprise Apps : 

- Speed
- Performance
- Scalability


6. ReactJS :

https://react.dev/learn/installation 

NodeJS + NPM Installed 

[NPM CRA - Create-React-App] npm install -g create-react-app
npm install --save react react-dom

npx create-react-app <name of the app> 

NPM vs NPX

7. JUnit & TestNg

Unit + Integration: 

TESTNG : https://testng.org/



Unit testing :
JUnit : Add the dependencies

Java - Junit
.NET/C# - NUnit
Python - PyUnit


-> Types of testing 

- Unit testing
- Functional testing
- E2E [end-to-end testing]
- API Testing
- Security testing
- Peformance testing
- Monkey testing
- Fuzzy testing -> after you finished the above


Service project : 12-15 types of testing
Product project : 27-29 types of testing

POM.XML

Where is POM.XML coming from and what does it do?

pom.xml : project object model

https://maven.apache.org/guides/introduction/introduction-to-the-pom.html

What is Maven : Build Tool

Enterprise Apps : Dev Stage - test stage - release stage - production stage[phases]

- Dev code
- Test code
- Artifacts
- Build tools : Java --> ANT/Maven/Gradle + .NET + NodeJS apps --> npm 

CI/CD Process : DevOps cycle 

Jenkins : 
CI : Continuous Integration
CD : Continuous Delivery/Deployment 

- Release tools 
- deployment tools

 

8. Selenium : Java + Web Driver

9. JMeter

https://jmeter.apache.org/download_jmeter.cgi

Enterprise Apps : 

a. What is performance engineering [web vs mobile app vs Cloud Native Apps]
b. What is a different performance vs scaling
c. What is the concept horizontal scaling vs vertical scaling
d. Sample app : LinkedIn :

S1 : Currently has 1000 services --[new features]--> 1200 services [in terms of scaling : what to scale : Horizontal OR Vertical Scaling] 

S2 : Currently has 1000000 end-users --[new features]--> 2000000 end-users [in terms of scaling : what to scale : Horizontal OR Vertical Scaling] 

Project Design : 

- Computational Power [Algorithm : Small thread vs Long thread]
- Transactional Processing : RW Activities [eg banking app : Create/Insert vs Select queries]
- Storage capacity : Instagram --> reels stored/comments/profiles stored || Accounts [active/non-active]

10. Github + Git

- Local windows : SCM-GIT

https://git-scm.com/downloads

- Github account : https://github.com/

a. Create your Github account
b. Create a repo

Each of you : 

Repo1 - practice
repo2 - assignments
repo3 - project repo [later]

[8:43 PM] Dibya (Guest)
https://www.w3schools.com/git/
[8:44 PM] Dibya (Guest)
https://www.youtube.com/watch?v=RGOj5yH7evk
[8:44 PM] Dibya (Guest)
https://www.datacamp.com/tutorial/github-and-git-tutorial-for-beginners

Git/Github concepts :

a. SCM - Software Configuration management

b. Git architecture

c. Git commands : Branch/Push/Pull/Merge/Clone/Rebase

POSTMAN :
https://www.postman.com/downloads/







